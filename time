# ARMA MODEL

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy import stats
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression

def linearreg(x,y):
    slope,intercept,r,p,std_err=stats.linregress(x,y)
    y0=[]
    for i in range(0,len(x)):
        dummy=0
        dummy=intercept+(slope*x[i])
        y0.append(dummy)
        
    print(slope,"*x +",intercept)
    return y0

def Multiplereg(x,y,p):
    #Data=pd.DataFrame([x])
    x=np.array(x)
    mlr = LinearRegression()
    mlr.fit(x.transpose(),y)
    y0=[]
    for i in range(0,len(y)):
        dummy=mlr.intercept_
        for j in range(p):
            dummy+=x[j][i]*mlr.coef_[j]
        #print(dummy)
        y0.append(dummy)
    for i in range(len(mlr.coef_)):
        print("(",mlr.coef_[i],"*x",i+1,")",end=" ")
        if(i<p-1):
            print("+",end=" ")
            
    return y0
    

# file = pd.read_csv('./532500.csv')
# Close=np.array(file['Open Price'])
Close=np.array([22,23,21,31,23,42,45,34,57,58,62,55])
y=np.array(Close)
ar=[]
ma=[]
ar_p=[]
ma_p=[]

sm.graphics.tsa.plot_acf(y,lags=2)
sm.graphics.tsa.plot_pacf(y,lags=2)

p=2
q=2
yt=y[p:]

for i in range(1,p+1):
    temp=y[0:len(y)-i]
    ar.append(temp[p-i:])
    
print("\nYt:",len(yt))
print("\nAr:",len(ar))
print(len(ar[0]), len(yt))

#print("\nAR:", ar)
"""for i in range(1,q):
    temp=y[0:len(y)-i]
    ma.append(temp[q-i:])"""
print("Auto Regression")
if(p==1):
    ar_p=linearreg(ar[0],yt)
    
else:
     ar_p=Multiplereg(ar,yt,p)
     
ye=[]

print("\n Moving Average")
for i in range(len(ar_p)):
    ye.append(yt[i]-ar_p[i])
for i in range(1,q+1):
    temp=ye[0:len(ye)-i]
    ma.append(temp[q-i:])

ye = np.array(ye)
yet=ye[q:]
   
if(q==1):
    ma_p=linearreg(ma[0],yet)
    
else:
     ma_p=Multiplereg(ma,yet,q)


# from statsmodels.tsa.arima_model import ARIMA
# arma_mod20 = ARIMA(pd.DataFrame(y), order=(2, 2, 2)).fit()
# print(arma_mod20.params)

#########################################################
#CALCULATE TREND
def cal_trend(x, y):
  a = sum(y)/len(y)
  x_coded = [(i-(sum(x)/len(x)))*2 for i in x]
  b = sum([i*j for i,j in zip(x_coded,y)]) / sum([pow(i,2) for i in x_coded])
  y_pred = [a+(b*i) for i in x_coded]
  pre_trend = [(i/j)*100 for i,j in zip(y, y_pred)]
  cyc_res = [((i-j)/j)*100 for i,j in zip(y, y_pred)]
  return [y_pred, pre_trend, cyc_res]

Year = [1989, 1990, 1991, 1992, 1993, 1994, 1995]
Boxes = [21, 19.4, 22.6, 28.2, 30.4, 24, 25]
#plt.xlabel('Year')
#plt.plot(Year, Boxes, color = 'blue')
Boxes_pred, pre_trend, cyc_res = cal_trend(Year, Boxes)
#plt.plot(Year, Boxes_pred, color = 'red')
print("Maximum Fluctuation in Percent of Trend: "+ str(Year[pre_trend.index(max([abs(i) for i in pre_trend]))]))
print("Maximum Fluctuation in Cyclic Residual: "+ str(Year[cyc_res.index(max([abs(i) for i in cyc_res]))]))


# DESEASONALIZE

def compute_seasonal_index(x, num_yrs):
  four_quarter_moving_total_avg = []
  four_quarter_centered_moving_avg = []
  percent_actual_to_moving_avg = []
  # four_quarter_moving_total_avg
  j = 0
  for i in range(len(x)-3):
    temp = (x[i] + x[i+1] + x[i+2] + x[i+3]) / 4
    four_quarter_moving_total_avg.append(temp)
  #print("\nFour quarter moving averages: ", four_quarter_moving_avg)

  # four_quarter_centered_moving_avg
  for i in range(len(four_quarter_moving_total_avg)-1):
    temp = (four_quarter_moving_total_avg[i] + four_quarter_moving_total_avg[i+1]) / 2
    four_quarter_centered_moving_avg.append(temp)
  #print("\nFour quarter centered moving averages: ", four_quarter_centered_moving_avg)

  # percent_actual_to_moving_avg
  for i in range(2, len(x)-2):
    temp = (x[i] / four_quarter_centered_moving_avg[j]) * 100
    j += 1
    percent_actual_to_moving_avg.append(temp)
  #print("\nPercentage of actual to moving averages: ", percent_actual_to_moving_avg)

  # Reordering the data 
  diff = [0, 0] + percent_actual_to_moving_avg
  n = len(diff) % 4
  diff += [0 for _ in range(n)]
  #print("\nDiff values: ", diff)
  track = []
  modified_mean = []
  width = len(diff) // num_yrs
  for i in range(4):
    temp = []
    for j in range(0, num_yrs):
      temp.append(diff[width*j+i])
    track.append(temp)
  #print("\nTrack values: ", track)

  for i in range(len(track)):
    track[i] = [i for i in track[i] if i != 0]
    a = min(track[i])
    b = max(track[i])
    track[i].remove(a)
    track[i].remove(b)
    n = len(track[i])
    modified_mean.append(sum(track[i]) / n)
  #print("\nModified means / Trimmed means: ", modified_mean)
  tot = sum(modified_mean)
  adjusting_factor = 400 / tot
  seasonal_indices = []
  for i in range(len(modified_mean)):
    seasonal_indices.append(modified_mean[i] * adjusting_factor)
  #print("\nSeasonal indices: ", seasonal_indices)
  modified_seasonal_indices = [i/100 for i in seasonal_indices]
  modified_seasonal_indices = modified_seasonal_indices * num_yrs
  deseasonalized_data = []
  for i in range(len(x)):
    deseasonalized_data.append((x[i] / modified_seasonal_indices[i]))
  #print("\nDeseasonalized data: ", deseasonalized_data)

  return {'four_quarter_moving_avg':four_quarter_moving_total_avg, 'four_quarter_centered_moving_avg':four_quarter_centered_moving_avg, 'percent_actual_to_moving_avg':percent_actual_to_moving_avg, 'diff':diff, 'track':track, 'modified_mean':modified_mean, 'seasonal_indices':seasonal_indices, 'deseasonalized_data':deseasonalized_data}
  

def identify_trend(x, num_yrs):
  n = len(x)
  coding = [0 for _ in range(n)]
  mid = (n//2) - 1
  coding[mid] = -0.5
  coding[mid+1] = 0.5
  for i in range(mid-1, -1, -1):
    coding[i] = coding[i+1] - 1
  for i in range(mid+2, n):
    coding[i] = coding[i-1] + 1
  for i in range(n):
    coding[i] *= 2
  xy = [i*j for i,j in zip(coding, x)]
  x_2 = [i**2 for i in coding]
  sum_y = sum(x)
  sum_x_2 = sum(x_2)
  sum_xy = sum(xy)
  #print("\nSummation y: ", sum_y)
  #print("\nSummation xy: ", sum_xy)
  #print("\nSummation x2: ", sum_x_2)
  b = sum_xy / sum_x_2
  a = sum_y / (num_yrs * 4)
  return {'a':a, 'b':b, 'coding':coding}

actual_sales = [102, 120, 90, 78, 110, 126, 95, 83, 111, 128, 97, 86, 115, 135, 103, 91, 122, 144, 110, 98]

res = compute_seasonal_index(actual_sales, 5)
# 4 quarter centered moving average
print(f"4 quarter centered moving average : {res['four_quarter_centered_moving_avg']}")
# percentage of actual to moving average
print(f"Percentage of actual to moving averages: {res['percent_actual_to_moving_avg']}")
# modified Seasonal Indices, Seasonal Indices
print(f"Modified seasonal indices : {res['modified_mean']}")
print(f"Seasonal Indices : {res['seasonal_indices']}")
coeff = identify_trend(res['deseasonalized_data'], 5)



# ARIMA MODEL

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy import stats
import statsmodels.api as sm
from statsmodels.tsa.arima.model import ARIMA
from sklearn.linear_model import LinearRegression
from statsmodels.graphics.tsaplots import plot_predict

    
file = pd.read_csv(r'file.csv')
Close=np.array(file['Close Price'])
#Close=np.array([22,23,21,31,23,42,45,34,57,58,62,55])
y=np.array(Close)


sm.graphics.tsa.plot_acf(y,lags=2)
sm.graphics.tsa.plot_pacf(y,lags=2)

p=1
q=1
d=1

model=ARIMA(y,order=(p,q,d))   
model_fit=model.fit()
plot_predict(model_fit, dynamic = False)
plt.show()

residuals = pd.DataFrame(model_fit.resid)
residuals.plot()
plt.show()
# density plot of residuals
residuals.plot(kind='kde')
plt.show()
# summary stats of residuals
print(residuals.describe())

output=model_fit.forecast()
y_p=output[0]

print(y_p)
    
